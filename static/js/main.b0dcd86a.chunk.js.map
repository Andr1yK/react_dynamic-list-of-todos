{"version":3,"sources":["StatusQuery.ts","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["StatusQuery","TodoList","memo","todos","onSelectUser","selectedUserId","onSelectStatus","useState","query","setQuery","filteredTodos","useMemo","filter","title","toLowerCase","includes","className","type","onChange","event","target","value","name","id","All","Active","Completed","length","map","completed","userId","htmlFor","readOnly","checked","onClick","request","url","fetch","then","response","json","CurrentUser","onClear","user","setUser","error","setError","clear","useCallback","useEffect","data","catch","err","message","email","phone","App","setSelectedUserId","setTodos","tasksStatusFilter","setTasksStatusFilter","getTodo","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0dcd86a.chunk.js","sourcesContent":["export enum StatusQuery {\n  All = 'null',\n  Active = 'false',\n  Completed = 'true',\n}\n","import React, {\n  ChangeEvent, memo, useMemo, useState,\n} from 'react';\nimport '../../styles/general.scss';\nimport { StatusQuery } from '../../StatusQuery';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onSelectUser: CallableFunction;\n  onSelectStatus: CallableFunction;\n  selectedUserId: number,\n};\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos, onSelectUser, selectedUserId, onSelectStatus,\n}) => {\n  const [query, setQuery] = useState('');\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(({ title }) => (\n      title.toLowerCase()\n        .includes(query.toLowerCase())\n    ));\n  }, [todos, query]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => setQuery(event.target.value);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        className=\"input input--center input--outline\"\n        onChange={handleChange}\n        value={query}\n      />\n\n      <select\n        name=\"status\"\n        className=\"input input--one-line\"\n        id=\"statusSelector\"\n        onChange={(event) => onSelectStatus(event.target.value)}\n      >\n        <option value={StatusQuery.All}>all</option>\n        <option value={StatusQuery.Active}>active</option>\n        <option value={StatusQuery.Completed}>completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        {todos.length ? (\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(({\n              completed, title, userId, id,\n            }) => (\n              <li\n                key={id}\n                className={`\n                  TodoList__item\n                  TodoList__item--${completed ? 'checked' : 'unchecked'}\n                `}\n              >\n                <label htmlFor=\"completed\">\n                  <input\n                    id=\"completed\"\n                    type=\"checkbox\"\n                    readOnly\n                    checked={completed}\n                  />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={`\n                    TodoList__user-button\n                    ${selectedUserId !== userId && 'TodoList__user-button--selected'}\n                    button\n                  `}\n                  type=\"button\"\n                  onClick={onSelectUser(userId)}\n                >\n                  User&nbsp;\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>Not found</p>\n        )}\n\n      </div>\n    </div>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport const getTodo = (params = '') => request(`/todos?${params}`);\n\nexport const getUserById = (id: number) => request(`/users/${id}/`);\n","import React, {\n  useEffect, useState, memo, useCallback,\n} from 'react';\nimport { getUserById } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onClear: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = memo(({ userId, onClear }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const clear = useCallback(() => {\n    setUser(null);\n    setError(null);\n  }, []);\n\n  useEffect(() => {\n    clear();\n\n    getUserById(userId)\n      .then(data => setUser(data))\n      .catch(err => setError(err.message));\n  }, [userId]);\n\n  return (\n    user ? (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          onClick={onClear}\n          className=\"button CurrentUser__button CurrentUser___lear\"\n          type=\"button\"\n        >\n          Clear\n        </button>\n      </div>\n    ) : (\n      <p>{error ? 'Error' : 'LOADING...'}</p>\n    )\n  );\n});\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodo } from './api/api';\nimport { StatusQuery } from './StatusQuery';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [tasksStatusFilter, setTasksStatusFilter] = useState(StatusQuery.All);\n\n  useEffect(() => {\n    const query = tasksStatusFilter !== StatusQuery.All\n      ? `completed=${tasksStatusFilter}`\n      : '';\n\n    getTodo(query)\n      .then(data => setTodos(data));\n  }, [tasksStatusFilter]);\n\n  const onSelectUser = useCallback((userId: number) => () => setSelectedUserId(userId), []);\n  const onSelectStatus = useCallback((status: StatusQuery) => setTasksStatusFilter(status), []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onSelectUser={onSelectUser}\n          selectedUserId={selectedUserId}\n          onSelectStatus={onSelectStatus}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} onClear={onSelectUser(0)} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(App);\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}